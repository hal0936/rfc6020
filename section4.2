4.2.  Language Overview

   This section introduces some important constructs used in YANG that
   will aid in the understanding of the language specifics in later
   sections.  This progressive approach handles the inter-related nature
   of YANG concepts and statements.  A detailed description of YANG
   statements and syntax begins in Section 7.

   这个章节介绍一些YANG中用到的重要概念，目的是帮助理解后续章节中说到的语言特性。
   这些先进的方式掌控着YANG观念和思想的内在根本。对YANG声明和语法的详细描述从第七章开始。
   
   4.2.1.  Modules and Submodules

   A module contains three types of statements: module-header
   statements, revision statements, and definition statements.  The
   module header statements describe the module and give information
   about the module itself, the revision statements give information
   about the history of the module, and the definition statements are
   the body of the module where the data model is defined.

   一个模块包含3中类型的声明：模块头部声明，修正声明，和定义声明。
   模块头部声明描述了这个模块并且给出这个模块自己的信息，
   修正声明给出关于这个模块的历史信息，定义声明是这个模块的数据模型定义的主体。

   A NETCONF server may implement a number of modules, allowing multiple
   views of the same data, or multiple views of disjoint subsections of
   the device's data.  Alternatively, the server may implement only one
   module that defines all available data.

   一个NETCONF服务可能实现很多模块，允许对同一数据多视图，或者对多段不相关的设备数据多视图。
   或者，NETCONF服务可能对只实现了一个模块来定义所有的可用数据。

   A module may be divided into submodules, based on the needs of the
   module owner.  The external view remains that of a single module,
   regardless of the presence or size of its submodules.

   一个模块可以根据用户模块使用者的需求，切分成多个子模块。
   忽略它的形式以及子模块的大小，从外部看来它是一个单独的模块。

   The "include" statement allows a module or submodule to reference
   material in submodules, and the "import" statement allows references
   to material defined in other modules.

   "include"声明允许一个模块或者子模块从子模块中引用元素，"import"声明允许
   引用其他模块的元素。

4.2.2.  Data Modeling Basics

   YANG defines four types of nodes for data modeling.  In each of the
   following subsections, the example shows the YANG syntax as well as a
   corresponding NETCONF XML representation.

   YANG为数据模型定义了4种类型的节点。在接下来4个子章节里，那里例子将展示
   与NETCONF XML相对应的YANG语法。


4.2.2.1.  Leaf Nodes

   A leaf node contains simple data like an integer or a string.  It has
   exactly one value of a particular type and no child nodes.

   一个包含类似整形或者字符串的简单数据的叶子节点。它只有一个指定了
   特定类型的值并且没有子节点。

   YANG Example:

       leaf host-name {
           type string;
           description "Hostname for this system";
       }

   NETCONF XML Example:

       <host-name>my.example.com</host-name>

   The "leaf" statement is covered in Section 7.6.

   "leaf"声明会在7.6章节全面介绍。

4.2.2.2.  Leaf-List Nodes

   A leaf-list is a sequence of leaf nodes with exactly one value of a
   particular type per leaf.

   叶子列表是一个叶子节点的序列，每个叶子拥有一个确切的特定类型的值。

   YANG Example:

     leaf-list domain-search {
         type string;
         description "List of domain names to search";
     }

   NETCONF XML Example:

     <domain-search>high.example.com</domain-search>
     <domain-search>low.example.com</domain-search>
     <domain-search>everywhere.example.com</domain-search>

   The "leaf-list" statement is covered in Section 7.7.
   "leaf-list"声明会在7.7章节全面介绍。

4.2.2.3.  Container Nodes

   A container node is used to group related nodes in a subtree.  A
   container has only child nodes and no value.  A container may contain
   any number of child nodes of any type (including leafs, lists,
   containers, and leaf-lists).

   容器节点用于组织一棵子树中的关联节点。一个容器节点只包含无值的子节点。
   一个容器节点可以包含任意数量任意类型(包括叶子、链表、容器，和列子列表)的子节点。

   YANG Example:

     container system {
         container login {
             leaf message {
                 type string;
                 description
                     "Message given at start of login session";
             }
         }
     }

   NETCONF XML Example:

     <system>
       <login>
         <message>Good morning</message>
       </login>
     </system>

   The "container" statement is covered in Section 7.5.
   "container"章节会在7.5章节全面介绍。

4.2.2.4.  List Nodes

   A list defines a sequence of list entries.  Each entry is like a
   structure or a record instance, and is uniquely identified by the
   values of its key leafs.  A list can define multiple key leafs and
   may contain any number of child nodes of any type (including leafs,
   lists, containers etc.).

   一个列表定义了一个列表项的序列。每一个项都像是一个结构或者一条记录的实例，
   并且以它的键值叶子的值作为唯一标识。一个列表可以定义多个键值叶子并且可以包含
   任意数量任意类型(包括叶子，列表，容器等)的子节点。

   YANG Example:

     list user {
         key "name";
         leaf name {
             type string;
         }
         leaf full-name {
             type string;
         }
         leaf class {
             type string;
         }
     }

   NETCONF XML Example:

     <user>
       <name>glocks</name>
       <full-name>Goldie Locks</full-name>
       <class>intruder</class>
     </user>
     <user>
       <name>snowey</name>
       <full-name>Snow White</full-name>
       <class>free-loader</class>
     </user>
     <user>
       <name>rzell</name>
       <full-name>Rapun Zell</full-name>
       <class>tower</class>
     </user>

   The "list" statement is covered in Section 7.8.
   "list"声明会在7.8章节全面介绍。


4.2.5.  Derived Types (typedef)

   YANG can define derived types from base types using the "typedef"
   statement.  A base type can be either a built-in type or a derived
   type, allowing a hierarchy of derived types.

   YNAG可以以基本类型为基础，使用"typedef"声明衍生类型。一个基本类型可以是
   一个内置类型或者一个衍生类型，允许定义多层的衍生类型。

   A derived type can be used as the argument for the "type" statement.

   YANG Example:

     typedef percent {
         type uint8 {
             range "0 .. 100";
         }
         description "Percentage";
     }

     leaf completed {
         type percent;
     }

   NETCONF XML Example:

     <completed>20</completed>

   The "typedef" statement is covered in Section 7.3.

   "typedef"声明会在7.3章节全面介绍。
   
4.2.6.  Reusable Node Groups (grouping)

   Groups of nodes can be assembled into reusable collections using the
   "grouping" statement.  A grouping defines a set of nodes that are
   instantiated with the "uses" statement:

   一组节点可以用"grouping"声明组合成一个可复用的集合。
   一个grouping能声明一个节点集合，这个节点集合使用"uses"声明来实例引用。

     grouping target {
         leaf address {
             type inet:ip-address;
             description "Target IP address";
         }
         leaf port {
             type inet:port-number;
             description "Target port number";
         }
     }

     container peer {
         container destination {
             uses target;
         }
     }

   NETCONF XML Example:

     <peer>
       <destination>
         <address>192.0.2.1</address>
         <port>830</port>
       </destination>
     </peer>

   The grouping can be refined as it is used, allowing certain
   statements to be overridden.  In this example, the description is
   refined:

   分组可以在使用时得到简化，允许某些声明被重写。在这个例子里，
   YANG简化描述了如下定义：

     container connection {
         container source {
             uses target {
                 refine "address" {
                     description "Source IP address";
                 }
                 refine "port" {
                     description "Source port number";
                 }
             }
         }
         container destination {
             uses target {
                 refine "address" {
                     description "Destination IP address";
                 }
                 refine "port" {
                     description "Destination port number";
                 }
             }
         }
     }

   The "grouping" statement is covered in Section 7.11.
   "grouping"声明会在7.11章节中全面介绍。

4.2.7.  Choices

   YANG allows the data model to segregate incompatible nodes into
   distinct choices using the "choice" and "case" statements.  The
   "choice" statement contains a set of "case" statements that define
   sets of schema nodes that cannot appear together.  Each "case" may
   contain multiple nodes, but each node may appear in only one "case"
   under a "choice".

   YANG允许数据模型使用"chuice"和"case"声明将互斥的node以明显的方式分离开来。
   "choice"声明中容纳了一个"case"声明的集合，集合中每个case声明的模式node不能相同。
   在一个chioce下，每个"case"包含多个node，但是任一个node只能出现在一个case中。

   When an element from one case is created, all elements from all other
   cases are implicitly deleted.  The device handles the enforcement of
   the constraint, preventing incompatibilities from existing in the
   configuration.

   当一个元素在一个case下被穿件，所有在其他case下的相同元素会被隐式删除。
   设备应该利用这个强制约束，以防止已有的配置出现不兼容。

   The choice and case nodes appear only in the schema tree, not in the
   data tree or NETCONF messages.  The additional levels of hierarchy
   are not needed beyond the conceptual schema.

   choice和case只出现在模式树种，不会这数据树或者NETCONF消息中。
   这个附加的标准不需要在模式的概念上体现。

   YANG Example:

     container food {
       choice snack {
           case sports-arena {
               leaf pretzel {
                   type empty;
               }
               leaf beer {
                   type empty;
               }
           }
           case late-night {
               leaf chocolate {
                   type enumeration {
                       enum dark;
                       enum milk;
                       enum first-available;
                   }
               }
           }
       }
    }

   NETCONF XML Example:

     <food>
       <pretzel/>
       <beer/>
     </food>

   The "choice" statement is covered in Section 7.9.

   "chioce"声明会在7.9章节中全面介绍。

4.2.8.  Extending Data Models (augment)

   YANG allows a module to insert additional nodes into data models,
   including both the current module (and its submodules) or an external
   module.  This is useful for example for vendors to add vendor-
   specific parameters to standard data models in an interoperable way.

   YANG允许一个模块向数据模型中添加附加的节点，包括添加本身模块(和他的子模块)
   或者一个外部的模块。这是一个有用的特性，例如供应商们以协同工作的方式
   向基本数据模型添加厂商指定的参数。

   The "augment" statement defines the location in the data model
   hierarchy where new nodes are inserted, and the "when" statement
   defines the conditions when the new nodes are valid.

   "augment"声明定义新节点加入到数据模型层级中的位置，"when"声明定义
   新节点加入的条件。

   YANG Example:

     augment /system/login/user {
         when "class != 'wheel'";
         leaf uid {
             type uint16 {
                 range "1000 .. 30000";
             }
         }
     }

   This example defines a "uid" node that only is valid when the user's
   "class" is not "wheel".
   这个例子定义了一个uid节点，条件是当user的class的值不是"wheel"。

   If a module augments another module, the XML representation of the
   data will reflect the prefix of the augmenting module.  For example,
   if the above augmentation were in a module with prefix "other", the
   XML would look like:

   如果向一个模块中加入另一个模块，数据的XML表达式会映射原模块的前缀。
   例如，一个前缀是other的模块使用了上面的YANG扩展，它的XML会像这样：

   NETCONF XML Example:

     <user>
       <name>alicew</name>
       <full-name>Alice N. Wonderland</full-name>
       <class>drop-out</class>
       <other:uid>1024</other:uid>
     </user>

   The "augment" statement is covered in Section 7.15.

   augment声明会在7.15章节全面介绍。

4.2.9.  RPC Definitions

   YANG allows the definition of NETCONF RPCs.  The operations' names,
   input parameters, and output parameters are modeled using YANG data
   definition statements.

   YANG支持NETCONF的RPC定义。YANG使用YANG的数据定义声明来对操作名称，入参，
   出参进行建模。


YANG Example:

     rpc activate-software-image {
         input {
             leaf image-name {
                 type string;
             }
         }
         output {
             leaf status {
                 type string;
             }
         }
     }

   NETCONF XML Example:

     <rpc message-id="101"
          xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
       <activate-software-image xmlns="http://acme.example.com/system">
         <image-name>acmefw-2.3</image-name>
      </activate-software-image>
     </rpc>

     <rpc-reply message-id="101"
                xmlns="urn:ietf:params:xml:ns:netconf:base:1.0">
       <status xmlns="http://acme.example.com/system">
         The image acmefw-2.3 is being installed.
       </status>
     </rpc-reply>

   The "rpc" statement is covered in Section 7.13.

   "rpc"声明会在7.13章节全面介绍。

4.2.10.  Notification Definitions

   YANG allows the definition of notifications suitable for NETCONF.
   YANG data definition statements are used to model the content of the
   notification.

   YANG支持NETCONF通知的定义。YANG的数据定义声明用于对通知的内容进行建模。

   YANG Example:

     notification link-failure {
         description "A link failure has been detected";
         leaf if-name {
             type leafref {
                 path "/interface/name";
             }
         }
         leaf if-admin-status {
             type admin-status;
         }
         leaf if-oper-status {
             type oper-status;
         }
     }

   NETCONF XML Example:

     <notification
         xmlns="urn:ietf:params:netconf:capability:notification:1.0">
       <eventTime>2007-09-01T10:00:00Z</eventTime>
       <link-failure xmlns="http://acme.example.com/system">
         <if-name>so-1/2/3.0</if-name>
         <if-admin-status>up</if-admin-status>
         <if-oper-status>down</if-oper-status>
       </link-failure>
     </notification>

   The "notification" statement is covered in Section 7.14.

   "notification"声明会在7.14章节全面介绍。

